/**
 * amis-ui v2.7.2
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../../../@babel/runtime/helpers/esm/slicedToArray.js');
var React = require('react');
var raf = require('../../../rc-util/es/raf.js');
var useState = require('../../../rc-util/es/hooks/useState.js');

/**
 * State generate. Return a `setState` but it will flush all state with one render to save perf.
 * This is not a realization of `unstable_batchedUpdates`.
 */

function useBatchFrameState() {
  var _useState = useState["default"]({}),
      _useState2 = slicedToArray["default"](_useState, 2),
      forceUpdate = _useState2[1];

  var statesRef = React.useRef([]);
  var walkingIndex = 0;
  var beforeFrameId = 0;

  function createState(defaultValue) {
    var myIndex = walkingIndex;
    walkingIndex += 1; // Fill value if not exist yet

    if (statesRef.current.length < myIndex + 1) {
      statesRef.current[myIndex] = defaultValue;
    } // Return filled as `setState`


    var value = statesRef.current[myIndex];

    function setValue(val) {
      statesRef.current[myIndex] = typeof val === 'function' ? val(statesRef.current[myIndex]) : val;
      raf["default"].cancel(beforeFrameId); // Flush with batch

      beforeFrameId = raf["default"](function () {
        forceUpdate({}, true);
      });
    }

    return [value, setValue];
  }

  return createState;
}

exports.useBatchFrameState = useBatchFrameState;
