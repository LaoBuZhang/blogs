/**
 * amis-core v2.7.2
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var helper = require('./helper.js');

var valueMap = {
    'marginTop': 'margin-top',
    'marginRight': 'margin-right',
    'marginBottom': 'margin-bottom',
    'marginLeft': 'margin-left',
    'paddingTop': 'padding-top',
    'paddingRight': 'padding-right',
    'paddingBottom': 'padding-bottom',
    'paddingLeft': 'padding-left',
    'top-border-width': 'border-top-width',
    'right-border-width': 'border-right-width',
    'bottom-border-width': 'border-bottom-width',
    'left-border-width': 'border-left-width',
    'top-border-style': 'border-top-style',
    'right-border-style': 'border-right-style',
    'bottom-border-style': 'border-bottom-style',
    'left-border-style': 'border-left-style',
    'top-border-color': 'border-top-color',
    'right-border-color': 'border-right-color',
    'bottom-border-color': 'border-bottom-color',
    'left-border-color': 'border-left-color',
    'fontSize': 'font-size',
    'fontWeight': 'font-weight',
    'lineHeight': 'line-height'
};
function findOrCreactStyle(id) {
    var varStyleTag = document.getElementById(id);
    if (!varStyleTag) {
        varStyleTag = document.createElement('style');
        varStyleTag.id = id;
        document.body.appendChild(varStyleTag);
    }
    return varStyleTag;
}
function insertStyle(style, id) {
    var varStyleTag = findOrCreactStyle(id);
    // bca-disable-line
    varStyleTag.innerHTML = style;
}
function addStyle(style, id) {
    var varStyleTag = findOrCreactStyle(id);
    // bca-disable-line
    varStyleTag.innerHTML += style;
}
function formatStyle(css, classNames, id) {
    var _a;
    if (!css) {
        return { value: '', origin: [] };
    }
    var res = [];
    var status2string = {
        default: '',
        hover: ':hover',
        active: ':hover:active',
        disabled: '.is-disabled'
    };
    var _loop_1 = function (item) {
        var body = css[item.key];
        var list = (_a = item.value) === null || _a === void 0 ? void 0 : _a.split(' ');
        var classNameList = [];
        if (!body) {
            return "continue";
        }
        list === null || list === void 0 ? void 0 : list.forEach(function (n) {
            if (/(\S*[C|c]lassName-\S*)/.test(n) &&
                !!~n.indexOf((id === null || id === void 0 ? void 0 : id.replace('u:', '').replace('-label', '').replace('-description', '').replace('-addOn', '')) || '')) {
                classNameList.push(n);
            }
        });
        var weightsList = item.weights || {};
        for (var _b = 0, classNameList_1 = classNameList; _b < classNameList_1.length; _b++) {
            var className = classNameList_1[_b];
            // 没有具体的样式，或者没有对应的classname
            var statusMap = {
                default: {},
                hover: {},
                active: {},
                disabled: {}
            };
            for (var key in body) {
                if (key === '$$id') {
                    continue;
                }
                if (!!~key.indexOf(':default')) {
                    statusMap.default[key.replace(':default', '')] = body[key];
                }
                else if (!!~key.indexOf(':hover')) {
                    statusMap.hover[key.replace(':hover', '')] = body[key];
                }
                else if (!!~key.indexOf(':active')) {
                    statusMap.active[key.replace(':active', '')] = body[key];
                }
                else if (!!~key.indexOf(':disabled')) {
                    statusMap.disabled[key.replace(':disabled', '')] = body[key];
                }
                else {
                    statusMap.default[key] = body[key];
                }
            }
            var _loop_2 = function (status_1) {
                var weights = weightsList[status_1];
                var styles = [];
                var fn = function (key, value) {
                    key = valueMap[key] || key;
                    styles.push("".concat(key, ": ").concat(value, ";"));
                };
                for (var key in statusMap[status_1]) {
                    if (key === '$$id') {
                        continue;
                    }
                    var style = statusMap[status_1][key];
                    if (typeof style === 'object') {
                        // 圆角特殊处理
                        if (key === 'radius') {
                            fn('border-radius', [
                                style['top-left-border-radius'],
                                style['top-right-border-radius'],
                                style['bottom-right-border-radius'],
                                style['bottom-left-border-radius']
                            ].join(' '));
                        }
                        else {
                            for (var k in style) {
                                if (k === '$$id') {
                                    continue;
                                }
                                var value = style[k];
                                value && fn(k, value);
                            }
                        }
                    }
                    else {
                        var value = style;
                        value && fn(key, value);
                    }
                }
                if (styles.length > 0) {
                    var cx = ((weights === null || weights === void 0 ? void 0 : weights.pre) || '') + className + ((weights === null || weights === void 0 ? void 0 : weights.suf) || '');
                    res.push({
                        className: cx + status2string[status_1],
                        content: ".".concat(cx + status2string[status_1], " {\n  ").concat(styles.join('\n  '), "\n}")
                    });
                    if (['hover', 'active', 'disabled'].includes(status_1)) {
                        res.push({
                            className: cx + '.' + status_1,
                            content: ".".concat(cx, ".").concat(status_1, " {\n  ").concat(styles.join('\n  '), "\n}")
                        });
                    }
                }
            };
            for (var status_1 in statusMap) {
                _loop_2(status_1);
            }
        }
    };
    for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {
        var item = classNames_1[_i];
        _loop_1(item);
    }
    return {
        value: res.map(function (n) { return n.content; }).join('\n'),
        origin: res
    };
}
function insertCustomStyle(css, classNames, id) {
    if (!css) {
        return;
    }
    var value = formatStyle(css, classNames, id).value;
    insertStyle(value, (id === null || id === void 0 ? void 0 : id.replace('u:', '')) || helper.uuid());
}

exports.addStyle = addStyle;
exports.findOrCreactStyle = findOrCreactStyle;
exports.formatStyle = formatStyle;
exports.insertCustomStyle = insertCustomStyle;
exports.insertStyle = insertStyle;
exports.valueMap = valueMap;
