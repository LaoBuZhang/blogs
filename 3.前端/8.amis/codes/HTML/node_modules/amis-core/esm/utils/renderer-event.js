/**
 * amis-core v2.7.2
 * Copyright 2018-2023 fex
 */

import { __awaiter, __generator, __assign } from 'tslib';
import { runActions } from '../actions/Action.js';
import { createObject } from './object.js';
import debounce from 'lodash/debounce';

var rendererEventListeners = [];
// 创建渲染器事件对象
function createRendererEvent(type, context) {
    var rendererEvent = {
        context: context,
        type: type,
        prevented: false,
        stoped: false,
        preventDefault: function () {
            rendererEvent.prevented = true;
        },
        stopPropagation: function () {
            rendererEvent.stoped = true;
        },
        get data() {
            return rendererEvent.context.data;
        },
        setData: function (data) {
            rendererEvent.context.data = data;
        }
    };
    return rendererEvent;
}
// 绑定事件
var bindEvent = function (renderer) {
    var _a, _b;
    if (!renderer) {
        return undefined;
    }
    var listeners = renderer.props.$schema.onEvent;
    if (listeners) {
        var _loop_1 = function (key) {
            var listener = rendererEventListeners.find(function (item) {
                return item.renderer === renderer && item.type === key;
            });
            if (listener === null || listener === void 0 ? void 0 : listener.executing) {
                (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.debounceInstance) === null || _a === void 0 ? void 0 : _a.cancel) === null || _b === void 0 ? void 0 : _b.call(_a);
                rendererEventListeners = rendererEventListeners.filter(function (item) {
                    return !(item.renderer === listener.renderer && item.type === listener.type);
                });
                rendererEventListeners.push({
                    renderer: renderer,
                    type: key,
                    debounce: listener.debounce || null,
                    weight: listener.weight || 0,
                    actions: listener.actions
                });
            }
            if (!listener) {
                rendererEventListeners.push({
                    renderer: renderer,
                    type: key,
                    debounce: listeners[key].debounce || null,
                    weight: listeners[key].weight || 0,
                    actions: listeners[key].actions
                });
            }
        };
        // 暂存
        for (var _i = 0, _c = Object.keys(listeners); _i < _c.length; _i++) {
            var key = _c[_i];
            _loop_1(key);
        }
        return function () {
            rendererEventListeners = rendererEventListeners.filter(function (item) { return item.renderer !== renderer; });
        };
    }
    return undefined;
};
// 触发事件
function dispatchEvent(e, renderer, scoped, data, broadcast) {
    var _a, _b, _c, _d, _e, _f;
    return __awaiter(this, void 0, void 0, function () {
        var unbindEvent, eventName, eventConfig, rendererEvent, listeners, executedCount, checkExecuted, _loop_2, _i, listeners_1, listener, state_1;
        var _this = this;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    unbindEvent = null;
                    eventName = typeof e === 'string' ? e : e.type;
                    (_c = (_b = (_a = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _a === void 0 ? void 0 : _a.env) === null || _b === void 0 ? void 0 : _b.beforeDispatchEvent) === null || _c === void 0 ? void 0 : _c.call(_b, e, renderer, scoped, data, broadcast);
                    if (!broadcast) {
                        eventConfig = (_e = (_d = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _d === void 0 ? void 0 : _d.onEvent) === null || _e === void 0 ? void 0 : _e[eventName];
                        if (!eventConfig) {
                            // 没命中也没关系
                            return [2 /*return*/, Promise.resolve()];
                        }
                        unbindEvent = bindEvent(renderer);
                    }
                    // 没有可处理的监听
                    if (!rendererEventListeners.length) {
                        return [2 /*return*/, Promise.resolve()];
                    }
                    rendererEvent = broadcast ||
                        createRendererEvent(eventName, {
                            env: (_f = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _f === void 0 ? void 0 : _f.env,
                            nativeEvent: e,
                            data: data,
                            scoped: scoped
                        });
                    listeners = rendererEventListeners
                        .filter(function (item) {
                        return item.type === eventName &&
                            (broadcast ? true : item.renderer === renderer);
                    })
                        .sort(function (prev, next) {
                        return next.weight - prev.weight;
                    });
                    executedCount = 0;
                    checkExecuted = function () {
                        executedCount++;
                        if (executedCount === listeners.length) {
                            unbindEvent === null || unbindEvent === void 0 ? void 0 : unbindEvent();
                        }
                    };
                    _loop_2 = function (listener) {
                        var _h, _j, wait, _k, trailing, _l, leading, _m, maxWait, debounced_1;
                        return __generator(this, function (_o) {
                            switch (_o.label) {
                                case 0:
                                    _h = (listener === null || listener === void 0 ? void 0 : listener.debounce) || {}, _j = _h.wait, wait = _j === void 0 ? 100 : _j, _k = _h.trailing, trailing = _k === void 0 ? true : _k, _l = _h.leading, leading = _l === void 0 ? false : _l, _m = _h.maxWait, maxWait = _m === void 0 ? 10000 : _m;
                                    if (!(listener === null || listener === void 0 ? void 0 : listener.debounce)) return [3 /*break*/, 1];
                                    debounced_1 = debounce(function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4 /*yield*/, runActions(listener.actions, listener.renderer, rendererEvent)];
                                                case 1:
                                                    _a.sent();
                                                    checkExecuted();
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); }, wait, {
                                        trailing: trailing,
                                        leading: leading,
                                        maxWait: maxWait
                                    });
                                    rendererEventListeners.forEach(function (item) {
                                        // 找到事件队列中正在执行的事件加上标识，下次待执行队列就会把这个事件过滤掉
                                        if (item.renderer === listener.renderer &&
                                            listener.type === item.type) {
                                            item.executing = true;
                                            item.debounceInstance = debounced_1;
                                        }
                                    });
                                    debounced_1();
                                    return [3 /*break*/, 3];
                                case 1: return [4 /*yield*/, runActions(listener.actions, listener.renderer, rendererEvent)];
                                case 2:
                                    _o.sent();
                                    checkExecuted();
                                    _o.label = 3;
                                case 3:
                                    // 停止后续监听器执行
                                    if (rendererEvent.stoped) {
                                        return [2 /*return*/, "break"];
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _i = 0, listeners_1 = listeners;
                    _g.label = 1;
                case 1:
                    if (!(_i < listeners_1.length)) return [3 /*break*/, 4];
                    listener = listeners_1[_i];
                    return [5 /*yield**/, _loop_2(listener)];
                case 2:
                    state_1 = _g.sent();
                    if (state_1 === "break")
                        return [3 /*break*/, 4];
                    _g.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, Promise.resolve(rendererEvent)];
            }
        });
    });
}
var getRendererEventListeners = function () {
    return rendererEventListeners;
};
/**
 * 兼容历史配置，追加对应name的值
 * @param props
 * @param data
 * @param valueKey
 */
var resolveEventData = function (props, data, valueKey) {
    var _a, _b;
    return createObject(props.data, props.name && valueKey
        ? __assign(__assign({}, data), (_a = {}, _a[props.name] = data[valueKey], _a.__rendererData = __assign(__assign({}, props.data), (_b = {}, _b[props.name] = data[valueKey], _b)), _a)) : data);
};

export { bindEvent, createRendererEvent, dispatchEvent, getRendererEventListeners, resolveEventData };
